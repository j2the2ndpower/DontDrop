<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init Game Settings

result = "";
error = "";
location = 0;
reward = 0;
auto_cache_ads = 0;
internet = chartboost_has_internet_connection();
alarm[0] = 5
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update hasInternetConnection variable with the current status of the Inernet Connection

internet = chartboost_has_internet_connection();
alarm[0] = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="70">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Async calls from native code

var type = async_load[? "type"];

switch type {
    case CBDidDisplayInterstitial:
        result = "Did Display Interstitial";
        error = -1;
        break;
    case CBDidCacheInterstitial:
        result = "Did Cache Interstitial";
        error = -1;
        break;
    case CBDidFailToLoadInterstitial:
        result = "Did Fail To Load Interstitial";
        error = async_load[? "error"];
        break;
    case CBDidDismissInterstitial:
        result = "Did Dismiss Interstitial";
        error = -1;
        break;
    case CBDidCloseInterstitial:
        result = "Did Close Interstitial";
        error = -1;
        break;
    case CBDidClickInterstitial:
        result = "Did Click Interstitial";
        error = -1;
        break;
    case CBDidDisplayRewardedVideo:
        result = "Did Display Rewarded Video";
        error = -1;
        break;
    case CBDidCacheRewardedVideo:
        result = "Did Cache Rewarded Video";
        error = -1;
        break;
    case CBDidFailToLoadRewardedVideo:
        result = "Did Fail To Load Rewarded Video";
        error = async_load[? "error"];
        break;
    case CBDidDismissRewardedVideo:
        result = "Did Dismiss Rewarded Video";
        error = -1;
        break;
    case CBDidCloseRewardedVideo:
        result = "Did Close Rewarded Video";
        error = -1;
        break;
    case CBDidClickRewardedVideo:
        result = "Did Click Rewarded Video";
        error = -1;
        break;
    case CBDidCompleteRewardedVideo:
        result = "Did Complete Rewarded Video";
        reward = async_load[? "reward"];
    case CBDidDisplayMoreApps:
        result = "Did Display More Apps";
        error = -1;
        break;
    case CBDidCacheMoreApps:
        result = "Did Cache More Apps";
        error = -1;
        break;
    case CBDidFailToLoadMoreApps:
        result = "Did Fail To Load More Apps";
        error = async_load[? "error"];
        break;
    case CBDidDismissMoreApps:
        result = "Did Dismiss More Apps";
        error = -1;
        break;
    case CBDidCloseMoreApps:
        result = "Did Close More Apps";
        error = -1;
        break;
    case CBDidClickMoreApps:
        result = "Did Click More Apps";
        error = -1;
        break;
    case CBDidInitialize:
        var status = async_load[? "status"];
        if status == 1 {
            result = "Did Initialize: OK! :)";
            error = -1;
            scr_update_auto_cache_ads_button();
        } else {
            result = "Did Initialize: KO :(";
            error = 0;
        }
        break;
    case CBDidFailToInitialize:
        result = "Did Fail To Initialize";
        error = async_load[? "error"];
        break;
    default:
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Update results on screen

draw_set_colour(c_white);

draw_text(10, 10, "Result: " + result);
if error &lt; 0 {
    draw_text(10, 30, "Error: None");
} else  {
    draw_text(10, 30, "Error:  " + string(error));
}
var version = chartboost_get_sdk_version();
draw_text(10, 50, "Version: " + version);

var hasInternetConnection = "OFF"
if internet {
    hasInternetConnection = "ON"
}
draw_text(10, 110, "Internet: " + hasInternetConnection);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
